{"version":3,"sources":["components/AppFrame/AppFrame.js","components/CityInfo/CityInfo.js","components/IconState/IconState.js","components/Weather/Weather.js","components/weatherDetails/WeatherDetails.js","components/ForecastChart/ForecastChart.js","components/ForecastItem/ForecastItem.js","components/Forecast/Forecats.js","helpers/getUrl.js","helpers/getDataAuxCityPage.js","helpers/getListForecastCityPage.js","helpers/geocity.js","hooks/useCityPage.js","helpers/cities.js","helpers/getAllWeather.js","hooks/useCityList.js","helpers/types.js","context/WeatherContext.js","hooks/useWeather.js","pages/City.js","components/CityListItem/CitylistItem.js","components/CityList/CityList.js","pages/Main.js","pages/NotFound.js","hooks/useVanta.js","components/WelcomeScreen/WelcomScreen.js","pages/Welcom.js","router/AppRouter.js","App.js","index.js"],"names":["AppFrame","children","IconSize","useMemo","size","Grid","container","justifyContent","AppBar","position","Toolbar","variant","IconButton","color","aria-label","Link","component","LinkRouter","to","Provider","value","Typography","item","xs","md","CityInfo","city","country","display","style","fontWeight","fontStyle","stateByName","clouds","WiDayCloudy","clear","WiDaySunny","rain","WiRain","snow","WiSnow","drizzle","WiRaindrop","thunderstorm","WiThunderstorm","fog","WiFog","haze","WiDayHaze","mist","IconState","state","StateByName","Weather","temperature","weather","direction","alignContent","spacing","Skeleton","height","width","animation","WeatherDetails","humidity","wind","alignItems","marginRight","marginTop","ForecastChart","data","charData","top","bottom","left","right","ResponsiveContainer","LineChart","margin","XAxis","dataKey","YAxis","Tooltip","Legend","CartesianGrid","Line","type","stroke","ForecastItem","weekDay","hour","Forecats","forecastItemList","map","forecast","data-testid","renderForecastItem","getUrl","countryCode","getDataAuxCityPage","day","moment","add","temps","list","filter","tem","unix","dt","dayOfYear","main","temp","dayHour","format","min","length","Number","convert","Math","from","toFixed","m√°x","max","getListForecastCityPage","interval","index","includes","i","toLowerCase","getCityCode","useCityPage","allDataForecast","allForecastItemList","dispatch","useParams","useDebugValue","useEffect","url","getForecast","a","cityCode","axios","get","dataAux","payload","listForecatsItemAux","console","log","cities","getAllWeather","speed","propName","propValue","useCityList","allweather","useState","error","setError","getWeather","getAllWeatherAux","response","status","request","forEach","types","WeatherStateContext","createContext","WeatherDispatchContext","initialState","WeatherProvider","reducer","useCallback","action","weatherCity","newAllWeather","foreCastData","newAllDataForecast","newAllForecastItemLIst","useReducer","stateContext","DispatchContext","useWeather","useContext","Error","City","code","weather2","dataForecast","c","justify","LinearProgress","CitylistItem","memo","eventoOnClick","ListItem","button","onClick","sm","CityList","onClickCity","Alert","severity","onClose","AlertTitle","List","cityandcountry","displayName","Main","history","useHistory","handleClick","push","Paper","elevation","NotFound","className","linq","useVanta","divRef","useRef","vanta","setvanta","Clouds","THREE","el","current","destroy","WelcomScreen","ref","Welcom","props","AppRouter","basename","process","exact","path","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e074a2a2.chunk.js","sourcesContent":["import React, { useMemo } from 'react'\nimport PropTypes from 'prop-types';\nimport {IconContext} from 'react-icons';\nimport {WiDaySunny} from 'react-icons/wi';\nimport {Grid, AppBar, Toolbar, IconButton,Link, Typography} from '@material-ui/core'\n//React Router\nimport {Link as LinkRouter} from 'react-router-dom'\n\nconst AppFrame = ({children}) => {\n    const IconSize = useMemo(() => ({size: \"2em\"}), []);\n    return (\n        <Grid  container justifyContent=\"center\">\n                <AppBar position=\"static\">\n                        <Toolbar variant=\"dense\">\n                                <IconButton color=\"inherit\" aria-label=\"menu\">\n                                    <Link component={LinkRouter} to =\"/main\" color=\"inherit\" aria-label=\"menu\">\n                                        <IconContext.Provider value={IconSize}>\n                                            <WiDaySunny/>\n                                            \n                                        </IconContext.Provider>\n                                    </Link>\n                                    </IconButton>\n                                    <Typography variant=\"h6\" color=\"inherit\">\n                                        Weather App\n                                    </Typography>\n                        </Toolbar>\n                </AppBar>\n                <Grid item \n                        xs={12}\n                        md={11}\n                        md={10}\n                        lg={8}\n                >\n                { children }\n                </Grid>\n        </Grid>\n    )\n}\n\nAppFrame.propTypes = {\nchildren: PropTypes.node //hace referencia a cualquier tipo de hijo\n}\n\nexport default AppFrame\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n//Component Typography\r\nimport Typography from '@material-ui/core/Typography'\r\n//Roboto\r\nimport 'typeface-roboto'\r\n\r\nconst CityInfo = ({city, country}) => {\r\n    return (\r\n        <>\r\n          <Typography display=\"inline\"  variant=\"h4\">{city},</Typography>\r\n          <Typography display=\"inline\" style={{fontWeight: \"300\", fontStyle:\"italic\"}} variant=\"h6\">{country}</Typography>\r\n        </>\r\n    )\r\n}\r\n\r\nCityInfo.propTypes = {\r\n\r\n}\r\n\r\nCityInfo.propTypes = {\r\n    city: PropTypes.string.isRequired,\r\n    country: PropTypes.string.isRequired\r\n}\r\nexport default CityInfo\r\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport {\n    WiDayCloudy,\n    WiDaySunny,\n    WiRain,\n    WiSnow,\n    WiRaindrop,\n    WiThunderstorm,\n    WiFog,\n    WiDayHaze\n\n} from 'react-icons/wi';\n\n\nexport const stateByName = {\n    clouds: WiDayCloudy,\n    clear: WiDaySunny,\n    rain: WiRain,\n    snow: WiSnow,\n    drizzle: WiRaindrop,\n    thunderstorm : WiThunderstorm,\n    fog: WiFog,\n    haze: WiDayHaze,\n    mist: WiDayHaze\n};\n\nconst IconState = ({state}) => {\n    const StateByName = stateByName[state];\n    return (\n      <StateByName/>\n    )\n}\n\nIconState.propTypes = {\nstate: PropTypes.oneOf([\"clear\", \"clouds\", \"snow\", \"drizzle\", \"rain\", \"thunderstorm\", \"fog\",\"haze\", \"mist\"]).isRequired\n}\n\nexport default IconState\n","import React, { useMemo } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport {Grid, Typography} from '@material-ui/core'\r\nimport Skeleton from '@material-ui/lab/Skeleton';\r\nimport IconState from '../IconState'\r\nimport { IconContext } from 'react-icons'\r\n\r\n\r\n//Rendereizar un componente dependiendo su estado\r\n/* const renderState = (state)=>{\r\n    const Icon  = stateByName[state];\r\n    return <Icon/>\r\n} */\r\nconst Weather = ({temperature, weather}) => {\r\n    const IconSize = useMemo(() => ({size: '5em'}), []);\r\n    return (\r\n        <Grid container item direction=\"row\" justifyContent=\"center\" alignContent=\"center\" spacing={1}>\r\n        <IconContext.Provider value= {IconSize}>\r\n            {   weather ? \r\n                (<IconState state={weather}/>) \r\n                                :\r\n                    (<Skeleton variant=\"circle\" height={80} width={80} animation=\"wave\" ></Skeleton>)\r\n                }\r\n        </IconContext.Provider>\r\n         {  temperature ? \r\n             (<Typography display=\"inline\" variant=\"h2\">{temperature}</Typography>)\r\n                                        :\r\n            (<Skeleton variant=\"rect\" height={80} width={80} animation=\"pulse\" ></Skeleton>)\r\n             }\r\n        </Grid>\r\n    )\r\n}\r\n\r\nWeather.propTypes = {\r\n    temperature: PropTypes.string,\r\n    weather: PropTypes.oneOf([\"clear\", \"clouds\", \"snow\", \"drizzle\", \"rain\", \"thunderstorm\", \"fog\",\"haze\", \"mist\"])\r\n    \r\n}\r\n\r\nexport default Weather\r\n","import React from 'react'\nimport PropTypes from 'prop-types';\nimport Typography from '@material-ui/core/Typography'\nimport { Grid } from '@material-ui/core';\n\nconst WeatherDetails = ({humidity, wind}) => {\n    return (\n        <Grid container item spacing={1} xs={12} direction=\"row\"  justifyContent=\"center\" alignItems=\"center\" >\n            <Typography style={{marginRight: '10px', marginTop: '10px'}}>Humedad:{humidity}%</Typography>\n            <Typography style={{marginTop: '10px'}}>Viento:{wind}Km/h</Typography>\n        </Grid>\n    )\n}\n\nWeatherDetails.propTypes = {\n    humidity: PropTypes.number.isRequired,\n    wind: PropTypes.number.isRequired,\n}\n\nexport default WeatherDetails\n","import React, { useMemo } from 'react'\nimport PropTypes from 'prop-types';\n//Rechart\nimport {Line, LineChart, CartesianGrid, XAxis, YAxis, Tooltip, Legend, ResponsiveContainer} from 'recharts'\n\n\nconst ForecastChart = ({data}) => {\n        const charData = useMemo(() => ({top: 20, bottom: 20, left: 5, right: 5}), []);\n    return (\n        <ResponsiveContainer height={250} width={\"95%\"}> \n            <LineChart\n                margin= {charData}\n                data={data} \n                >\n                    <XAxis dataKey=\"dayHour\"></XAxis>\n                    <YAxis></YAxis>\n                    <Tooltip/>\n                    <Legend/>\n                    <CartesianGrid></CartesianGrid>\n                    <Line type=\"monotone\" dataKey=\"min\" stroke=\"#3f51b5\"></Line>\n                    <Line type=\"monotone\" dataKey=\"m√°x\" stroke=\"#ff3c00\"></Line>\n                </LineChart>\n        </ResponsiveContainer>\n    )\n}\n\nForecastChart.propTypes = {\n    data : PropTypes.arrayOf(\n        PropTypes.shape({\n            dayHour: PropTypes.string.isRequired,\n            min: PropTypes.string.isRequired,\n            max: PropTypes.string.isRequired,\n        }),\n    ).isRequired,\n}\n\nexport default ForecastChart\n","import React from 'react'\nimport PropTypes from 'prop-types';\nimport {Typography, Grid} from '@material-ui/core';\nimport { IconContext } from 'react-icons/lib';\nimport IconState from '../IconState';\n\n\n\n\n\nconst ForecastItem = ({weekDay, hour, state, temperature}) => {\n    return (\n        <Grid container direction=\"column\" justifyContent=\"center\" alignItems=\"center\">\n            <Grid item>\n                <Typography>{weekDay}</Typography>\n            </Grid>\n            <Grid item>\n                <Typography>{hour}</Typography>\n            </Grid>\n            <Grid item>\n            <IconContext.Provider value= {{size: '3em'}}>\n                <IconState state={state}/>\n            </IconContext.Provider>\n            </Grid>\n            <Grid item>\n                <Typography>{temperature}¬∞</Typography>\n            </Grid>\n\n        </Grid >\n    )\n}\n\nForecastItem.propTypes = {\n    weekDay: PropTypes.string.isRequired,//ptsr\n    hour: PropTypes.number.isRequired,//ptnr\n    state: PropTypes.string.isRequired,\n    temperature: PropTypes.number.isRequired,\n}\n\nexport default ForecastItem\n","import React from 'react'\nimport PropTypes from 'prop-types';\nimport {Grid} from '@material-ui/core'\nimport ForecastItem from '../ForecastItem';\n\n//Funcion renderizadora\nconst renderForecastItem = (forecast) => {\n    const {weekDay, hour, state, temperature} = forecast;\n    \n    return (\n        <Grid data-testid=\"forecast-item\" item key={`${weekDay}${hour}`}>\n            <ForecastItem hour={hour} weekDay={weekDay} state={state} temperature={temperature}/>\n        </Grid>\n    )\n}\n\n\nconst Forecats = ({forecastItemList}) => {\n    \n    return (\n        <Grid\n            container\n            justifyContent=\"space-around\"\n            alignItems=\"center\"\n            spacing={3}\n            >\n                { forecastItemList &&\n                    forecastItemList.map(forecast => (renderForecastItem(forecast)))\n                }\n        </Grid>\n    )\n}\n\n/*ForecastItemLIst es un array de elementos\nLos elementos deben tener una forma en particular con \nlas siguientes propiedades: \n    weekday: PropType.string.isRequired,\n    hour: PropTypes.number.isRequired,\n    state: PropTypes.oneOf([\"cloud\", \"cloudy\", \"fog\", \"sunny\", \"rain\"]),isRequired,\n    temperature: PropTypes.number.isRequired\n*/\nForecats.propTypes = {\n    forecastItemList: PropTypes.arrayOf(PropTypes.shape({\n        weekDay: PropTypes.string.isRequired,\n        hour: PropTypes.number.isRequired,\n        state: PropTypes.oneOf([\"clear\", \"clouds\", \"snow\", \"drizzle\", \"rain\", \"thunderstorm\", \"fog\",\"haze\", \"mist\"]).isRequired,\n        temperature: PropTypes.number.isRequired\n    })).isRequired\n}\n\nexport default Forecats\n","\nexport const getUrl = (type,city, countryCode) => `https://api.openweathermap.org/data/2.5/${type}?q=${city},${countryCode}&appid=823dee69d4da95742d6df214be11bfb2`;","//moment / espa√±ol\nimport moment from 'moment';\nimport 'moment/locale/es'\n//conver-units\nimport convert from'convert-units'\n\nconst getDataAuxCityPage = (data) => {\n    const daysAhead = [0,1,2,3,4,5];\n    const days =  daysAhead.map(day  => moment().add(day, 'd'));//crea un array de dias desde el dia en el que estamos\n    const dataAux = days.map(day => {\n        \n        //min max\n        const tempArray = data.list.filter(tem  => {\n            const dayOfYear = moment.unix(tem.dt).dayOfYear(); // convertimos la fecha en unix en dia del a√±o\n\n            return dayOfYear === day.dayOfYear();\n            \n        });\n\n        //console.log(tempArray, day.format('ddd'));\n        const temps = tempArray.map(item => item.main.temp)\n\n        //const ultimo = temps.length - 1\n        return ({\n            dayHour: day.format('ddd'),\n            min:  (temps.length > 1) ?Number(convert(Math.min(...temps) ).from('K').to('C').toFixed(0))  : 0,     //temps.sort()[0],\n            m√°x:  (temps.length > 1) ? Number(convert(Math.max(...temps) ).from('K').to('C').toFixed(0)): 0 //temps.sort()[ultimo]\n        })\n    })\n\n    return dataAux\n}\n\nexport default getDataAuxCityPage;","//moment / espa√±ol\nimport moment from 'moment';\nimport 'moment/locale/es'\n//conver-units\nimport convert from'convert-units'\n\nconst getListForecastCityPage = (data) =>{\n    //{hour : 18, state: 'clouds', temperature: 17, weekDay: 'Jueves'}\n    const interval = [4,8,12,16,20,24];\n\n    const listForecatsItemAux = data.list.filter((item, index) => interval.includes(index)) // extrae estas posiciones del arreglo lista\n                .map(i =>{\n                    return({\n                        hour : moment.unix(i.dt).hour(),\n                        weekDay: moment.unix(i.dt).format('dddd'),\n                        state: i.weather[0].main.toLowerCase(),\n                        temperature:  convert(i.main.temp ).from('K').to('C').toFixed(0)\n                    })\n                })\n    \n                return listForecatsItemAux\n};\n\nexport default getListForecastCityPage;\n\n","export const getCityCode = (city, countryCode) => `${city} - ${countryCode}`;","import { useEffect, useState, useDebugValue } from 'react';\n//params\nimport { useParams } from 'react-router';\n//axios\nimport axios from 'axios';\nimport { getUrl } from '../helpers/getUrl';\nimport getDataAuxCityPage from '../helpers/getDataAuxCityPage';\nimport getListForecastCityPage from '../helpers/getListForecastCityPage';\nimport { getCityCode } from '../helpers/geocity';\n\nconst useCityPage = ( allDataForecast, allForecastItemList,dispatch) => {\n  /*   const [dataForecast, setDataForecast] = useState(null);\n    const [forecastItemList, setForecastItemList] = useState(null); */\n    const {city, countryCode} = useParams();\n    \n    useDebugValue(`Estoy en mi customHook y puedo mostrar informacion para retroalimentar al programador ${city}`);\n    useEffect(() => {\n    const url = getUrl('forecast',city, countryCode);\n        \n        const getForecast = async() => {\n            const cityCode = getCityCode(city, countryCode);\n            try {\n                \n                const {data} = await axios.get(url);\n                const dataAux = getDataAuxCityPage(data); //helper for dataAux\n                    //console.log(dataAux);\n                //onSetDataForecast({[cityCode] : dataAux}); //remplazo por actions\n                dispatch({type : 'SET_DATA_FORECAST', payload: {[cityCode] : dataAux}})\n\n                const listForecatsItemAux = getListForecastCityPage(data);//helper fot ListForecastItemAux\n                \n                //OnSetForecastItemList({[cityCode] : listForecatsItemAux});\n                dispatch({type: 'SET_DATA_FORE_ITEM_LIST', payload: {[cityCode] : listForecatsItemAux}})\n            } catch (error) {\n                console.log(error);\n            }\n        }\n        \n        //Condicionando la peticion al servidor\n        const cityCode = getCityCode(city, countryCode);\n        if(allDataForecast && allForecastItemList && !allDataForecast[cityCode] && !allForecastItemList[cityCode]){\n\n            getForecast();  \n        }\n        \n        \n        \n    }, [city, countryCode,dispatch, allDataForecast, allForecastItemList]);\n    \n    //return [dataForecast, forecastItemList, city, countryCode] \n    return [city, countryCode] \n}\n\nexport default useCityPage;","//Cities\r\nexport const cities = [\r\n    {city: 'Bogota', country: 'Colombia', countryCode: 'CO'},\r\n    {city: 'Madrid', country: 'Espa√±a', countryCode: 'ES' },\r\n    {city: 'Buenos Aires', country: 'Argentina', countryCode: 'AR'},\r\n    {city: 'Ciudad de M√©xico', country: 'M√©xico', countryCode: 'MX' },\r\n  ]\r\n\r\n\r\n  export const getCountryName = (code) =>  cities.filter(c => c.countryCode === code)[0].country;\r\n","//Convert Units\nimport convert from 'convert-units';\n//geocity\nimport { getCityCode } from '../helpers/geocity';\nconst getAllWeather = (data, city, countryCode) => {\n\n        const temperature = convert(data.main.temp).from('K').to('C').toFixed(1) + \"¬∞c\";\n        const humidity = data.main.humidity;\n        const wind = data.wind.speed;\n        const propName = getCityCode(city, countryCode)\n        const state = data.weather[0].main.toLowerCase();\n        const propValue  = {temperature, state, humidity, wind}\n         return {[propName] : propValue}\n}\n\nexport default getAllWeather;","import { useEffect, useState } from \"react\";\n//axios\nimport axios from 'axios';\n//Cities\nimport {cities} from '../helpers/cities'\nimport { getUrl } from \"../helpers/getUrl\";\nimport getAllWeather from \"../helpers/getAllWeather\";\nimport { getCityCode } from \"../helpers/geocity\";\n\nconst   useCityList = (dispatch, allweather) => {\n    //const [allweather, setAllweather] = useState({}); //SUBIENDO EL ESTADO    \n    const [error, setError] = useState(null);\n    \n\n    \n    \n    useEffect(() => {\n        const getWeather = async(city, countryCode) =>{\n            try {\n                //Encarando el principio. no detener el flujo de datos, asi no quitamos las propiedades necesarias en el array de dependencias\n                const propName = getCityCode(city, countryCode);\n\n                //onsetAllweather({[propName] : {}});\n                dispatch({type: 'SET_ALL_WEATHER', payload:{[propName] : {}} });\n\n                const url = getUrl('weather',city,countryCode)            \n                const {data} = await axios.get(url);\n                \n                            // .then(({data}) => {\n                                const getAllWeatherAux = getAllWeather(data, city, countryCode); //helper\n                                \n                                //SUBIENDO EL ESTADO\n                                //setAllweather(allweather => ({...allweather , ...getAllWeatherAux})) // al agregar allweather al setAllweather, lo que hace es que\n                                //directamente estamos haciendo referencia a su estado y ya no es necesario ponerlo en el arreglo de depencencias\n                                //si solo lo pusieras en el arreglo de dependecias, como estaria cambiando se volver a ejecutar el efecto y se haria un bucle en la funcion\n                                //que nos trae la data, con esto eliminamos esa invocacion de manera inecesario y evitas una fuga de memoria\n                            //})\n                        \n                            //onsetAllweather({...allweather , ...getAllWeatherAux});\n                            //onsetAllweather(getAllWeatherAux);\n                            dispatch({type: 'SET_ALL_WEATHER', payload: getAllWeatherAux });\n\n            } catch (error) {\n                \n                //  .catch(error => {\n                      \n                      if(error.response){ //Errores que responde el servidor\n                          const {data, status} = error.response;\n                          setError('Ha ocurrido un error en el servidor del clima', status);\n                      }else if(error.request){ //Errores que no llegan al servidor, puede ser por el internet\n                          console.log('Servidor innaccecible o no hay conexion a internet');\n                          setError('Verifique su conexion a interntet');\n                      }else{//Errores imprevistos\n                              console.log('errores imprevistos');\n                              setError('Error al cargar los datos')\n                      }\n\n                      \n                  //}) \n            }\n        }\n\n        cities.forEach(({city, countryCode}) =>{ \n            if(! allweather[getCityCode(city, countryCode)]){\n                console.log('Pase por aqui');\n                getWeather(city, countryCode)}\n            }\n            \n            );\n\n        \n    }, [ dispatch, allweather]);\n\n    return [ error, setError]\n}\n\n\nexport default useCityList;","export const types = {\n    setAllWather: 'SET_ALL_WEATHER',\n    setDataForecast :'SET_DATA_FORECAST',\n    setDataForecastItemLIst:'SET_DATA_FORE_ITEM_LIST'\n};\n","import React, { createContext, useCallback, useReducer } from 'react'\n//TYPES\nimport {types} from '../helpers/types'\n\n export const WeatherStateContext = createContext();\n export const WeatherDispatchContext = createContext(); \n\n const initialState = {\n    allweather : {},\n    allDataForecast : {},\n    allForecastItemList : {}\n};\n\n\n\n\nexport const WeatherProvider = ({children}) => {\n    //Reducer\n      //action {type : 'Nombre de la accion', payload: 'carga que alterara al estado'} \n      const reducer = useCallback((state, action) => {\n          switch (action.type) {\n              case types.setAllWather:\n                  const weatherCity = action.payload;\n                  const newAllWeather = { ...state.allweather, ...weatherCity}; //nuevo estado\n    \n                  return {...state, allweather : newAllWeather} //agregando al state general\n    \n              case types.setDataForecast:\n                  const foreCastData = action.payload;\n                  const newAllDataForecast = {...state.allDataForecast, ...foreCastData};//nuevo state\n    \n                  return {...state, allDataForecast : newAllDataForecast};\n              case types.setDataForecastItemLIst:\n                  const  forecastItemList  = action.payload;\n                  const newAllForecastItemLIst = {...state.allForecastItemList, ...forecastItemList};\n                  return {...state, allForecastItemList : newAllForecastItemLIst};\n              \n              default:\n                  return state;\n          }\n      },[]); //solo una vez\n      const [stateContext, DispatchContext] = useReducer(reducer,initialState); //react nos asegura que no generara distintas instancias, por eso aqui ya no se ocupa usememo\n\n\n    return (\n        <WeatherDispatchContext.Provider  value={DispatchContext}>      \n            <WeatherStateContext.Provider  value={stateContext}>\n                    {children}\n            </WeatherStateContext.Provider>\n        </WeatherDispatchContext.Provider>\n    )\n}\n\n","import { useContext } from \"react\";\nimport { WeatherDispatchContext, WeatherStateContext } from \"../context/WeatherContext\";\n\n\n\n    \n    const useWeather = () => {\n        const state = useContext(WeatherStateContext);\n        const dispatch = useContext(WeatherDispatchContext);\n\n        if(!state, !dispatch){\n            throw Error('Must set dispatch or state provider');\n        }\n        return [state, dispatch]\n       \n    }\n    \n\n\nexport {\n    useWeather\n}","import React, { useContext, useEffect, useMemo, useState } from 'react'\nimport AppFrame from '../components/AppFrame';\nimport { Grid } from '@material-ui/core';\nimport LinearProgress from '@material-ui/core/LinearProgress'\nimport CityInfo from '../components/CityInfo'\nimport Weather from '../components/Weather'\nimport WeatherDetails from '../components/weatherDetails/WeatherDetails'\nimport ForecastChart from '../components/ForecastChart'\n\nimport Forecats from '../components/Forecast/Forecats'\n//CustomHooks\nimport useCityPage from '../hooks/useCityPage';\nimport useCityList from '../hooks/useCityList'\nimport CircularStatic from '../components/CircularProgressWithLabel';\nimport { getCityCode } from '../helpers/geocity';\nimport { getCountryName } from '../helpers/cities';\n\n//context\nimport {WeatherStateContext, WeatherDispatchContext} from '../context/WeatherContext'\nimport { useWeather} from '../hooks/useWeather';\n\nconst City = () => {\n    \n    //Context  HOC\n    //const data = useContext(WeatherStateContext);\n    //const actions = useContext(WeatherDispatchContext);\n       const  [data, dispatch] = useWeather();\n       \n\n\n    //const { onSetDataForecast,OnSetForecastItemList} = actions;\n    const {  allDataForecast, allForecastItemList} = data;\n    const [ city, countryCode] = useCityPage( allDataForecast, allForecastItemList,dispatch);\n    \n            //useCityList(onsetAllweather, allweather);\n    \n    const cityCode = getCityCode(city, countryCode)\n    const weather2 = data.allweather[cityCode];\n\n    const  dataForecast = allDataForecast[cityCode];\n    const forecastItemList = allForecastItemList[cityCode];\n    //console.log(weather2);\n    \n    //CityLIst\n    //const city = 'CDMX';\n    const country = getCountryName(countryCode);\n\n    //Weather\n    const temperature = weather2?.temperature;\n    const weather = weather2?.state;\n\n    //WeatherInfo\n    const humidity = weather2?.humidity;\n    const wind = weather2?.wind;\n\n    //const CircularProgressWithLabel = CircularStatic()\n\n\n\n    return (\n        <AppFrame>\n        <Grid container\n            justify=\"space-around\"\n            direction=\"column\"\n            spacing={2}>\n            <Grid item container \n                xs={12} \n                justify=\"center\"\n                alignItems=\"flex-end\">\n                <CityInfo city={city} country={country} />\n            </Grid>\n            <Grid container item xs={12}\n                justify=\"center\">\n                <Weather weather={weather} temperature={temperature} />\n                {\n                    humidity && wind && \n                    <WeatherDetails \n                        humidity={humidity} \n                        wind={wind} />\n                }\n            </Grid>\n            <Grid item>\n                {\n                    !dataForecast && !forecastItemList && <LinearProgress />\n                }\n            </Grid>\n            <Grid item>\n                {\n                    dataForecast && <ForecastChart data={dataForecast} />\n                }\n            </Grid>\n            <Grid item>\n                {\n                    forecastItemList && <Forecats forecastItemList={forecastItemList} />\n                }\n            </Grid>\n        </Grid>        \n    </AppFrame>\n    )\n}\n\n\n\nexport default City\n","import React, { memo } from 'react'\n\nimport {ListItem} from '@material-ui/core'\nimport CityInfo from '../CityInfo';\nimport Weather from '../Weather';\nimport Grid from '@material-ui/core/Grid';\n\n//areEqual\n/* const areEqual = (prev, next) => {\n    \n    console.log('city', prev.city === next.city);\n    console.log('countryCode', prev.countryCode === next.countryCode);\n    console.log('country', prev.country === next.country);\n    console.log('weather', prev.weather === next.weather);\n    console.log('eventoOnClick', prev.eventoOnClick === next.eventoOnClick);\n\n    return false\n} */\n\n\nconst CitylistItem = memo(({city, country, eventoOnClick, weather}) => {\n    return (\n        <ListItem button onClick={eventoOnClick}>\n        <Grid  container item xs={12} justifyContent=\"center\" alignItems=\"center\">\n\n            <Grid item xs={12}sm={8} >\n                <CityInfo city ={city} country={country} />\n\n            </Grid>\n            \n         \n            <Grid  item xs={12} md={3} container  justifyContent=\"center\">\n                \n                    <Weather temperature={weather && weather.temperature} weather={weather && weather.state}/>\n            </Grid>\n\n\n        </Grid>\n    </ListItem>   \n    )\n})//areEqual\n\nexport default CitylistItem\n","import React, { memo, useContext, useEffect, useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Alert, AlertTitle } from '@material-ui/lab';\r\nimport {List, ListItem} from '@material-ui/core'\r\n\r\nimport useCityList from '../../hooks/useCityList';\r\nimport { getCityCode } from '../../helpers/geocity';\r\nimport CitylistItem from '../CityListItem/CitylistItem';\r\n\r\n//context\r\nimport {WeatherStateContext, WeatherDispatchContext} from '../../context/WeatherContext'\r\nimport { useWeather } from '../../hooks/useWeather';\r\n\r\n\r\n\r\n\r\n\r\n//renderCityAndCountry se va a convertir en una funcion que retorna otra funcion\r\nconst renderCityAndCountry = eventoOnClick =>  (cityandcountry, weather) =>{\r\n    const {city} = cityandcountry;\r\n    //const {temperature, state} = weather;\r\n    return (\r\n                <CitylistItem  key = {city}  {...cityandcountry} eventoOnClick ={eventoOnClick} weather={weather}/>\r\n        )\r\n    }\r\n    const CityList = memo(({cities, onClickCity}) => {\r\n        //Context  HOC\r\n        /* const {allweather} = useContext(WeatherStateContext);\r\n        const actions = useContext(WeatherDispatchContext); */\r\n        const [{allweather}, dispatch] =  useWeather(); //UNA SOLA LINEA\r\n\r\n        \r\n            \r\n        const [ error, setError] = useCityList(dispatch, allweather);\r\n        \r\n    return (\r\n        <>\r\n        {\r\n            error && <Alert severity=\"error\" onClose={() => setError(null)} ><AlertTitle>{error}</AlertTitle></Alert>\r\n        }\r\n        <List>\r\n          {  \r\n                cities.map((city,i) => renderCityAndCountry(() => onClickCity(city.city, city.countryCode))(city, allweather[getCityCode(city.city, city.countryCode)]))   \r\n            }  \r\n        </List>\r\n        </>\r\n    )\r\n});\r\n\r\nCitylistItem.displayName = 'PUTOOO'\r\n\r\n/* CityList.propTypes = {\r\n    cities: PropTypes.arrayOf(PropTypes.shape({\r\n        city: PropTypes.string,\r\n        country:  PropTypes.string,\r\n        countryCode: PropTypes.string\r\n    })).isRequired, //ptar\r\n    onClickCity:PropTypes.func.isRequired,//ptfr\r\n} */\r\n\r\nexport default CityList\r\n","import React, { useCallback, useMemo } from 'react'\nimport {Paper} from '@material-ui/core'\nimport CityList from '../components/CityList';\n\n//Components\nimport AppFrame from '../components/AppFrame'\n//HELPERS \nimport {cities} from '../helpers/cities';\nimport { useHistory } from 'react-router-dom';\n//params\n\n\nconst Main = () => {\n    const history = useHistory();\n     const handleClick = useCallback((city, countryCode) =>  {\n        history.push(`/city/${countryCode}/${city}`); \n    },[history]); \n\n    \n    return (\n        <AppFrame>   \n            <Paper elevation={5}>\n                < CityList onClickCity={handleClick} cities={cities} />\n            </Paper>\n        </AppFrame>\n    )\n}\n\n\nexport default Main\n","import React from 'react'\n\nimport {Grid, Typography, Link} from '@material-ui/core'\n\nimport {IconContext} from 'react-icons';\nimport {WiDaySunny} from 'react-icons/wi';\n\nimport {Link as linq} from 'react-router-dom'\n\nexport const NotFound = () => {\n    return (\n        <Grid container direction=\"column\" justifyContent=\"center\" className=\"full\">\n        <div className=\"highligth\">\n                <Grid item container justifyContent=\"center\" alignItems=\"center\">\n                        <Grid item>\n                                <IconContext.Provider value={{size: \"6em\"}}>\n                                    <WiDaySunny/>\n                                </IconContext.Provider>\n                        </Grid>\n                        <Grid item container direction=\"column\" justifyContent=\"center\" alignItems=\"center\">\n                            <Typography variant=\"h4\" color=\"inherit\">\n                              404 | Not Found\n\n                            </Typography>\n                            <Link color=\"inherit\" aria-label=\"menu\" component={linq} to=\"/welcome\">\n                                Ir al inicio\n                            </Link>\n                        </Grid>\n                </Grid>\n        </div>\n    </Grid>\n    )\n}\n","import { useEffect, useRef, useState } from \"react\";\nimport Clouds from 'vanta/dist/vanta.clouds.min';\nimport *  as THREE from 'three'\n\n\nconst useVanta = () => {\n    const divRef = useRef(null);\n    const [vanta, setvanta] = useState(0);\n  \n    useEffect(() => {\n            if(!vanta) {  // sero es falsy por lo tanto se puede negar\n                console.log('Moficamos el estado vanta');\n  \n                setvanta(Clouds({\n                    THREE,\n                    el: divRef.current\n                }))\n            }\n  \n            return () =>{\n                if(vanta) {\n                    vanta.destroy();\n                    console.log('libero los recursos');\n                }\n            }\n  \n        }, [vanta]);\n        return [divRef]\n    }\n\n\n  export default useVanta; \n","import React , {useEffect, useRef, useState}from 'react'\nimport PropTypes from 'prop-types';\n\nimport useVanta from '../../hooks/useVanta';\n\nconst WelcomScreen = ({children}) => {\n    \n    //custom hook\n    const [divRef] = useVanta();\n\n    return (\n        <div className=\"full\" ref={divRef}>\n            {children}\n        </div>\n    )\n}\n\nWelcomScreen.propTypes = {\nchildren : PropTypes.node,\n}\n\nexport default WelcomScreen\n","import React from 'react'\n//import PropTypes from 'prop-types';\n\nimport WelcomScreen  from '../components/WelcomeScreen'\nimport {Grid, Typography, Link} from '@material-ui/core'\n\nimport {IconContext} from 'react-icons';\nimport {WiDaySunny} from 'react-icons/wi';\n\nimport {Link as linq} from 'react-router-dom'\n\nconst Welcom = props => {\n    return (\n        <WelcomScreen>\n            <Grid container direction=\"column\" justifyContent=\"center\" className=\"full\">\n                <div className=\"highligth\">\n                        <Grid item container justifyContent=\"center\" alignItems=\"center\">\n                                <Grid item>\n                                        <IconContext.Provider value={{size: \"6em\", color:\"orange\"}}>\n                                            <WiDaySunny/>\n                                        </IconContext.Provider>\n                                </Grid>\n                                <Grid item container direction=\"column\" justifyContent=\"center\" alignItems=\"center\">\n                                    <Typography variant=\"h4\" color=\"inherit\">\n                                    <span style={{color:\"blue\"}}>Weather App</span> \n\n                                    </Typography>\n                                    <Link color=\"inherit\" aria-label=\"menu\" component={linq} to=\"/main\">\n                                        Ingresar\n                                    </Link>\n                                </Grid>\n                        </Grid>\n                </div>\n            </Grid>\n        </WelcomScreen>\n    )\n}\n\nWelcom.propTypes = {\n\n}\n\nexport default Welcom\n","import React, { useCallback, useMemo, useState } from 'react'\nimport { useReducer } from 'react';\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n  } from \"react-router-dom\";\nimport City from '../pages/City';\nimport Main from '../pages/Main';\nimport { NotFound } from '../pages/NotFound';\nimport Welcom from '../pages/Welcom';\n\n//Context\nimport {WeatherProvider} from '../context/WeatherContext';\n\n\nexport const AppRouter = () => {\n    \n    \n\n\n    return (\n                <WeatherProvider >\n                <Router basename={process.env.PUBLIC_URL}>    \n                    <div>\n                        <Switch>\n                            <Route exact path=\"/main\">\n                                <Main />\n                            </Route>\n                            <Route exact path=\"/city/:countryCode/:city\" >\n                                <City   />\n                            </Route>\n                            <Route exact path=\"/\" component={Welcom}/>\n                            <Route component={NotFound}/>\n                            \n                        </Switch>\n                    </div>\n                </Router>   \n                </WeatherProvider>\n    )\n}\n","import React from 'react';\nimport { AppRouter } from './router/AppRouter';\n\n\n\n\n\nconst App = () => {\n  \n  return (\n\n    <AppRouter/>\n    \n      \n  )\n}\n\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css'\n\nReactDOM.render(\n  \n    <App />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}